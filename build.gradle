plugins {
    id 'java'
    id 'jacoco'
}

group = 'com.example'
version = '1.0'
sourceCompatibility = 17
targetCompatibility = 17

def fileToExclude = [
        '**/com/barun/fabric/portfoliooverlap/PortfolioOverlap.*'
]

jacoco { //Please do not change this
    toolVersion = "0.8.8"

}

jacocoTestReport { //Please do not change this
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
        xml.destination file("./jacoco.xml")
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: fileToExclude)
        }))
    }

    violationRules {
        rule {
            limit {
                minimum = 0.90
            }
            failOnViolation true
        }
    }
    dependsOn test
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: fileToExclude)
        }))
    }

    dependsOn jacocoTestCoverageVerification
}

jar {
    archiveBaseName = 'geektrust' //Please do not change this final artifact name
    version = null               //Please do not change this final artifact version
    manifest {
        attributes 'Main-Class': 'com.barun.fabric.portfoliooverlap.PortfolioOverlap'
        //Change this to the main class of your program which will be executed
    }
    // To create a single jar with all dependencies.
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}

test { ///Please do not change this
    useJUnitPlatform()
    testLogging {
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_ERROR"
    }
    finalizedBy jacocoTestReport // report is always generated after tests run
    afterSuite { desc, result ->
        if (!desc.parent)
            println("${result.resultType} " +
                    "(${result.testCount} tests, " +
                    "${result.successfulTestCount} successes, " +
                    "${result.failedTestCount} failures, " +
                    "${result.skippedTestCount} skipped)")
    }
    finalizedBy jacocoTestCoverageVerification
}


repositories {
    mavenCentral()
}

//Add your dependencies here
dependencies {
    implementation 'com.google.code.gson:gson:2.8.6'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.1.1'

}